generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole  @default(CITIZEN)
  cpf            String?   @unique
  phone          String?
  address        String?
  city           String?
  state          String?
  zipCode        String?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  comments       Comment[]
  assignedIssues Issue[]   @relation("IssueAssignee")
  authoredIssues Issue[]   @relation("IssueAuthor")
  sessions       Session[]
  votes          Vote[]

  @@map("users")
}

model Issue {
  id           String        @id @default(cuid())
  title        String
  description  String
  category     IssueCategory
  status       IssueStatus   @default(OPEN)
  priority     IssuePriority @default(MEDIUM)
  latitude     Float
  longitude    Float
  address      String
  images       String[]      @default([])
  authorId     String
  assignedToId String?
  resolvedAt   DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  attachments  Attachment[]
  comments     Comment[]
  assignedTo   User?         @relation("IssueAssignee", fields: [assignedToId], references: [id])
  author       User          @relation("IssueAuthor", fields: [authorId], references: [id])
  votes        Vote[]

  @@map("issues")
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  isOfficial Boolean  @default(false)
  issueId    String
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id])
  issue      Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  type      VoteType
  userId    String
  issueId   String
  createdAt DateTime @default(now())
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, issueId])
  @@map("votes")
}

model Attachment {
  id           String         @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  type         AttachmentType
  issueId      String
  createdAt    DateTime       @default(now())
  issue        Issue          @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  userId    String
  issueId   String?
  createdAt DateTime         @default(now())

  @@map("notifications")
}

enum UserRole {
  CITIZEN
  ADMIN
  MODERATOR
}

enum IssueCategory {
  INFRASTRUCTURE
  HEALTH
  EDUCATION
  SECURITY
  ENVIRONMENT
  TRANSPORT
  OTHER
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum VoteType {
  UP
  DOWN
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  VIDEO
}

enum NotificationType {
  ISSUE_CREATED
  ISSUE_UPDATED
  ISSUE_RESOLVED
  COMMENT_ADDED
  VOTE_RECEIVED
}
