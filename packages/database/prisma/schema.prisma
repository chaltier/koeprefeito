// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CITIZEN)
  cpf           String?   @unique
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  authoredIssues   Issue[] @relation("IssueAuthor")
  assignedIssues   Issue[] @relation("IssueAssignee")
  comments Comment[]
  votes    Vote[]

  @@map("users")
}

model Issue {
  id          String        @id @default(cuid())
  title       String
  description String        @db.Text
  category    IssueCategory
  status      IssueStatus   @default(OPEN)
  priority    IssuePriority @default(MEDIUM)
  
  // Location data
  latitude    Float
  longitude   Float
  address     String
  
  // Media
  images      String[]      @default([])
  
  // Metadata
  authorId    String
  assignedToId String?
  resolvedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  author      User          @relation("IssueAuthor", fields: [authorId], references: [id])
  assignedTo  User?         @relation("IssueAssignee", fields: [assignedToId], references: [id])
  comments    Comment[]
  votes       Vote[]
  attachments Attachment[]

  @@map("issues")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  isOfficial Boolean @default(false)
  
  // Relations
  issueId   String
  authorId  String
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Vote {
  id      String   @id @default(cuid())
  type    VoteType
  
  // Relations
  userId  String
  issueId String
  user    User     @relation(fields: [userId], references: [id])
  issue   Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([userId, issueId])
  @@map("votes")
}

model Attachment {
  id          String      @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  type        AttachmentType
  
  // Relations
  issueId     String
  issue       Issue       @relation(fields: [issueId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())

  @@map("attachments")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String           @db.Text
  type      NotificationType
  isRead    Boolean          @default(false)
  
  // Relations
  userId    String
  issueId   String?
  
  createdAt DateTime         @default(now())

  @@map("notifications")
}

// Enums
enum UserRole {
  CITIZEN
  ADMIN
  MODERATOR
}

enum IssueCategory {
  INFRASTRUCTURE
  HEALTH
  EDUCATION
  SECURITY
  ENVIRONMENT
  TRANSPORT
  OTHER
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum VoteType {
  UP
  DOWN
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  VIDEO
}

enum NotificationType {
  ISSUE_CREATED
  ISSUE_UPDATED
  ISSUE_RESOLVED
  COMMENT_ADDED
  VOTE_RECEIVED
}