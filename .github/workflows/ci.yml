name: 🔄 CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  SKIP_ENV_VALIDATION: 1

jobs:
  # Job 1: Lint e Type Check
  quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false

      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 📦 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Lint
        run: pnpm lint

      - name: 🎯 Type check
        run: pnpm type-check

      - name: 🧪 Format check
        run: pnpm format:check

  # Job 2: Build e Test
  build:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: quality

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: koeprefeito
          POSTGRES_PASSWORD: password
          POSTGRES_DB: koeprefeito_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false

      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 📦 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🗄️ Generate Prisma Client
        run: pnpm db:generate
        env:
          DATABASE_URL: postgresql://koeprefeito:password@localhost:5432/koeprefeito_test

      - name: 🗄️ Push database schema
        run: pnpm db:push
        env:
          DATABASE_URL: postgresql://koeprefeito:password@localhost:5432/koeprefeito_test

      - name: 🏗️ Build packages
        run: pnpm build

      - name: 🧪 Run tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://koeprefeito:password@localhost:5432/koeprefeito_test
          NEXTAUTH_SECRET: test-secret-for-ci
          NEXTAUTH_URL: http://localhost:3000

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v5
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Job 3: Security Audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: 🔒 Audit dependencies
        run: pnpm audit --audit-level moderate

      - name: 🔍 Security scan
        uses: securecodewarrior/github-action-add-sarif@v1
        if: success()
        with:
          sarif-file: 'security-scan-results.sarif'

  # Job 4: Performance Test
  performance:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build for production
        run: pnpm build
        env:
          SKIP_ENV_VALIDATION: 1

      - name: ⚡ Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Job 5: Dependabot Auto-merge
  auto-merge:
    name: 🤖 Auto-merge Dependabot
    runs-on: ubuntu-latest
    needs: [quality, build, security]
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'

    steps:
      - name: 🤖 Enable auto-merge for Dependabot PRs
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  # Job 6: Notify on Success/Failure  
  notify:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [quality, build, security]
    if: always()

    steps:
      - name: 📢 Notify success
        if: needs.quality.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success'
        run: |
          echo "✅ All CI checks passed!"
          echo "🚀 Ready for deployment!"

      - name: 📢 Notify failure
        if: needs.quality.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure'
        run: |
          echo "❌ CI pipeline failed!"
          echo "🔍 Check the logs for details."
          exit 1